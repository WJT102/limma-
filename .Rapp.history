library(sas7bdat)#
library(sva)#
library(reshape)#
library(ggplot2)#
library(gridExtra)#
library(knitr)#
library(dplyr)#
library(kableExtra)#
library(tidyverse)#
library(minfi)#
library(stringr)#
library(limma)#
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)#
library(minfi)#
library(DMRcate)#
library(UpSetR)#
library(reshape)#
library(corrplot)#
library(factoextra)#
library(ENmix)#
#
# loading annotation#
anno = getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)#
anno = data.frame(anno)#
#
# functions#
# manhattan polt#
manhattan = function(probe, region, FDR = FALSE, annotate = NULL, title = NULL){#
	# chromosome as numeric#
	probe$chr = as.numeric(gsub("chr", "", probe$chr))#
#
	# dataframes with common columns#
	probe = data.frame(name = probe$cpg, p = probe$P.Value, fdr = probe$adj.P.Val, bonf = probe$adj.P.Val.bonf, chr = probe$chr, pos = probe$pos, type = 'position', dmp_sig = NA, color = NA)#
	region_df = data.frame(name = as.character(seq(1:nrow(region))), p = NA, fdr = NA, bonf = NA, chr = region$chr, pos = region$start, type = 'region', dmp_sig = NA, color = NA, size = NA)#
#
	# indicating probes within regions#
	for (i in 1:length(region$chr)){#
		probe$dmp_sig[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = 1#
	}#
	# variable for point color#
	probe$color[probe$dmp_sig == 1] = 50#
	probe$color[probe$fdr < 0.05] = 100#
	probe$color[is.na(probe$color)] = probe$chr[is.na(probe$color)]#
	# variable for point size#
	probe$size[probe$color == 50 | probe$color == 100] = 1#
	probe$size[is.na(probe$size)] = 0.5#
#
	# combine dataframes#
	df_comb = rbind(probe, region_df)#
#
	# dataset for plotting#
		don = df_comb %>% #
	  		# Compute chromosome size#
				group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>% #
	  		# Calculate cumulative position of each chromosome#
	 			mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%#
	  		# Add this info to the initial dataset#
	  			left_join(df_comb, ., by=c("chr"="chr")) %>%#
	  		# Add a cumulative position of each site#
				arrange(chr, pos) %>% mutate(poscum=pos+tot) # %>%#
	 		# Prepare X axis#
				axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
		don = merge(don, df_comb, on='name', all.x=T)#
		don = don[order(don$size),]#
		don_position = don[don$type == 'position',]#
		don_region = don[don$type == 'region',]#
		colors = c("#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", "#969696", "#737373", '#2166ac', 'black')#
	manhattan = ggplot(don_position, aes(x=poscum, y=-log10(p))) +#
	geom_point(aes(color=as.factor(color)), size= don_position$size, alpha = don_position$size) + scale_color_manual(values = colors) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don_position)), colour = '#AB3428', size=.2, alpha = 0.5) +#
	geom_vline(xintercept= don_region$poscum, colour = '#4393c3', size=.2) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don_position$poscum), max(don_position$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don_position$p)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don_position$p)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don_position$p[don_position$fdr < 0.05])), colour='#AB3428', size=.2, alpha = 0.5, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don_position$poscum)*0.05, y = max(-log10(don_position$p)), label = annotate, size = 4)#
	}#
	return(manhattan)#
}#
#
# lambda#
lambda = function(p) median(qchisq(p, df=1, lower.tail=FALSE), na.rm=TRUE) / qchisq(0.5, df=1)#
#
gg_qqplot = function(pvector){#
	l = round(lambda(pvector), 3)#
	o = -log10(sort(pvector, decreasing = FALSE))#
	e = -log10(ppoints(length(pvector)))#
	df = data.frame(o = o, e = e)#
	ggplot(df, aes(e, o)) + geom_point(alpha = 0.5, size = 1) + geom_abline(intercept = 0, slope = 1, color = '#AB3428') + labs(y = expression(Observed ~ ~-log[10](italic(p))), x = expression(Expected ~ ~-log[10](italic(p)))) + theme_classic() + annotate("text", x = 1, y = 5, label = paste0('lambda = ', l))#
}#
#
# volcano#
volcano = function(probe, type = 'DMP'){#
	if (type == 'DMP'){#
		volcano = ggplot(probe, aes(x=logFC, y  = -log10(P.Value))) + #
		geom_point(size = 0.8, alpha=0.4) + #
		geom_hline(aes(yintercept = -log10(0.05/nrow(probe)),linetype = 'Bonferroni threshold'), color = "#AB3428", size = 0.5) + #
	#	geom_hline(aes(yintercept = -log10(max(P.Value[adj.P.Val < 0.05])),linetype = 'FDR threshold'), color = "#AB3428", size = 0.3) + #
		scale_linetype_manual(name = '', values = c(1,2), guide = guide_legend(override.aes = list(color = c("#AB3428", "#AB3428")))) + theme_minimal() + #
		labs(y=expression(-log[10]*"(P-value)"), x='Effect estimate') + theme(panel.grid.minor.y = element_blank()) + theme(text = element_text(size=8)) + #
		theme(legend.position="none") + scale_y_continuous(expand = c(0, 0)) + theme(panel.grid.minor.x = element_blank(), panel.grid.major.y = element_line(size = 0.2, color = 'gray65'), panel.grid.major.x = element_line(size = 0.2, color = 'gray65'))#
		return(volcano)#
	} else if (type == 'DVP'){#
		volcano = ggplot(probe, aes(x= DiffLevene, y  = -log10(P.Value))) + #
		geom_point(size = 0.8, alpha=0.4) + #
		geom_hline(aes(yintercept = -log10(0.05/nrow(probe)),linetype = 'Bonferroni threshold'), color = "#AB3428", size = 0.5) + #
		geom_hline(aes(yintercept = -log10(max(P.Value[Adj.P.Value < 0.05])),linetype = 'FDR threshold'), color = "#AB3428", size = 0.3) + #
		scale_linetype_manual(name = '', values = c(1,2), guide = guide_legend(override.aes = list(color = c("#AB3428", "#AB3428")))) + theme_minimal() + #
		labs(y=expression(-log[10]*"(P-value)"), x='Effect estimate') + theme(panel.grid.minor.y = element_blank()) + theme(text = element_text(size=8)) + #
		theme(legend.position="none") + scale_y_continuous(expand = c(0, 0)) + theme(panel.grid.minor.x = element_blank(), panel.grid.major.y = element_line(size = 0.2, color = 'gray65'), panel.grid.major.x = element_line(size = 0.2, color = 'gray65'))#
		return(volcano)#
	}#
}#
#
# DMP analysis#
run_DMP <- function(mvals, design){#
  # fit model#
  l_fit <- limma::lmFit(object = mvals, design = design)#
  # extract standard errors#
  std_err <- l_fit$stdev.unscaled[,2]*l_fit$sigma#
  std_err_df <- data.frame(std_err)#
  std_err_df$cpg <- rownames(std_err_df)#
  e_fit <- limma::eBayes(l_fit, robust = TRUE)#
  # extract results and add Bonferroni correction#
  p_top <- limma::topTable(e_fit, adjust = "BH", coef = 2, num = Inf, confint = TRUE)#
  p_top <- p_top[order(p_top$P.Value), , drop = FALSE]#
  p_top$adj.P.Val.bonf <- topTable(e_fit, adjust="bonferroni", coef=2, number = Inf)$adj.P.Val#
  # merge results and standard errors#
  p_top$cpg <- rownames(p_top)#
  p_top <- merge(p_top, std_err_df, by = 'cpg')#
  rownames(p_top) <- p_top$cpg#
  return(p_top)#
}#
#
# Combp#
acf.table<-function(x,loc,dist.cutoff){#
  flag=TRUE; lag=1; result=NULL#
  while(flag){#
    x1=head(x,-lag); x2=tail(x,-lag); dist=diff(loc,lag=lag)#
    index=(dist<dist.cutoff)  #
    if(all(!index)){flag=FALSE}else{#
      result=rbind(result,data.frame(x1=x1[index],x2=x2[index],dist=dist[index]))#
    lag=lag+1#
    }#
  }#
  return(result)  #
}#
#
get.acf<-function(data,dist.cutoff,bin.size){#
  temp<-NULL#
  for (chr in unique(as.vector(data$chr))){#
    y<-data[as.vector(data$chr)==chr,]; y<-y[order(y$end),]#
    temp<-rbind(temp,acf.table(y$p,y$end,dist.cutoff))#
  }#
  bin.label<-findInterval(temp$dist,seq(bin.size,dist.cutoff,bin.size))#
  temp.stouffer<-by(temp,bin.label,FUN=function(x){cor.test(qnorm(x$x1),#
               qnorm(x$x2),alternative="greater")},simplify=FALSE)#
#
  cor.stouffer<-sapply(temp.stouffer,function(x){x$estimate})#
  p.stouffer<-sapply(temp.stouffer,function(x){x$p.value})#
#
  if (any(p.stouffer>0.05)){#
    index=min(which(p.stouffer>0.05))#
    cor.stouffer[index:length(cor.stouffer)]=0#
  }#
  return(cor.stouffer)#
}#
#
regplot<-function(ref,sig,extend=2000,outf="region_plot.pdf"){#
  sig=sig[order(sig[,"chr"],sig[,"start"]),]#
  ref=ref[order(ref[,"chr"],ref[,"start"]),]#
#
  pdf(outf)#
  for(i in 1:nrow(sig)){#
    chr=as.vector(sig$chr[i])#
    pos1=sig$start[i]#
    pos2=sig$end[i]#
    subset=ref[as.vector(ref$chr)==chr & ref$start>=(pos1-extend) & ref$start<=(pos2+extend),]#
    subset$cor="black"#
    subset$cor[subset$start>=pos1 &subset$start<=pos2]="red"#
#
    ylab=bquote('-log'['10']*'(P) value')#
#
    plot(subset$start,-log10(subset$p),col=subset$cor,pch=20,xlim=c(pos1-extend,#
          pos2+extend),xlab="Chromosome position",ylab=ylab)#
  }#
  dev.off()#
}#
#
# comb_p-like method#
combp2<-function(data,dist.cutoff=1000,bin.size=310,seed=0.01,#
               region_plot=TRUE,mht_plot=TRUE,nCores=10,verbose=TRUE){#
  if(nCores>detectCores()){nCores=detectCores()}#
  data=as.data.frame(data)#
  data$start=as.numeric(as.vector(data$start))#
  data$end=as.numeric(as.vector(data$end))#
  data=data[!is.na(data$start) & !is.na(data$end),]#
  data$p=as.numeric(as.vector(data$p))#
#
  acf<-get.acf(data,dist.cutoff,bin.size)#
  if(verbose){#
    cat("P value correlations:\n")#
    bin=seq(bin.size,dist.cutoff,bin.size)#
    if(!(dist.cutoff%%bin.size==0)){bin=c(bin,dist.cutoff)}#
    print(data.frame(bin=bin,acf=acf))#
  }#
#
  result<-mclapply(unique(as.vector(data$chr)), function(chr){#
    y=data[as.vector(data$chr)==chr,]; y=y[order(y$end),]#
    pos=y$end; p=qnorm(y$p)#
#
    temp=sapply(pos,function(i){#
      index.i=(abs(pos-i)<bin.size);#
      if (sum(index.i)>1){  #
        int<-findInterval(c(dist(pos[index.i])),c(bin.size,2*bin.size))#
        sd<-sqrt(sum(acf[int+1])*2+sum(index.i))#
        return(pnorm(sum(p[index.i]),mean=0,sd=sd))#
      }else{return(y$p[index.i])}#
    })#
#
    return(data.frame(chr,start=pos,end=pos,s.p=temp))#
  },mc.cores=nCores)#
#
  result <- do.call("rbind", result)#
  names(result)=c("chr","start","end","s.p")#
#
  result=result[p.adjust(result$s.p,method="fdr")<seed,]#
#
  result.fdr=NULL#
  if (nrow(result)>0){#
    for (chr in unique(result$"chr")){#
      y=data[as.vector(data$chr)==chr,]; y=y[order(y$end),]#
      pos=y$end; p=qnorm(y$p)#
#
      result.chr=result[result$"chr"==chr,]#
      a=IRanges::IRanges(start=result.chr$start,end=result.chr$end)#
      b=IRanges::reduce(a,min.gapwidth=dist.cutoff)#
#
      start=IRanges::start(b); end=IRanges::end(b)#
      region.max<-max(IRanges::width(b))#
      temp=sapply(1:length(b),function(i){#
        index.i=(pos>=start[i] & pos<=end[i]);#
        if (sum(index.i)>1){  #
          int<-findInterval(c(dist(pos[index.i])),#
              seq(bin.size,region.max+bin.size,bin.size))#
          sd<-sqrt(sum(ifelse(int<length(acf),#
              acf[int+1],0))*2+sum(index.i))#
          return(pnorm(sum(p[index.i]),mean=0,sd=sd))#
        }else{return(y$p[index.i])}#
      })#
      result.fdr=rbind(result.fdr,data.frame(chr,start,end,p=temp))#
    }#
    result.fdr$length = (result.fdr$end - result.fdr$start) + 1#
    result.fdr = result.fdr[result.fdr$length > 1,]#
#
    ##### BH FDR correction and Sidak correction#
    result.fdr$fdr=p.adjust(result.fdr$p,method="fdr")#
    result.fdr$sidak=(1-(1-result.fdr$p)^(nrow(data)/(result.fdr$end-result.fdr$start+1)))#
    result.fdr<-result.fdr[order(result.fdr$p),]#
#
    ##### use 0-coordinate#
    result.fdr$start=(result.fdr$start-1)#
  }#
#
  if(is.null(result.fdr)){cat("Number of identified DMR:  0\n")}else{#
    ndmr=nrow(result.fdr)#
  result.fdr$start=as.numeric(as.vector(result.fdr$start))#
  result.fdr$end=as.numeric(as.vector(result.fdr$end))#
  result.fdr$chr=factor(result.fdr$chr)#
#
    cat("Number of DMRs identified:  ",ndmr, "\n")#
    if(region_plot){#
      cat("Drawing regional plot: region_plot.pdf ...\n")#
      sig=result.fdr#
      regplot(ref=data,sig)#
    }#
  if(mht_plot){#
    cat("Drawing manhattan plot: mht.jpg ...\n")#
    set2=NULL#
    for(i in 1:ndmr){#
        set2=c(set2,as.vector(data$probe[as.vector(data$chr)==as.vector(result.fdr$chr[i])#
           & data$start>=result.fdr$start[i] & data$start<=result.fdr$end[i]]))#
    }#
  mhtplot(probe=data$probe,chr=as.vector(data$chr),pos=data$start,p=data$p,color="gray",markprobe=set2)#
  }#
  #number of probes within eath DMR#
#
  result.fdr$nprobe=NA#
  for(i in 1:nrow(result.fdr)){#
result.fdr$nprobe[i]=nrow(data[as.vector(data$chr)==as.vector(result.fdr$chr[i])#
& data$start>=result.fdr$start[i] & data$end<=result.fdr$end[i],])#
}#
#
  write.table(result.fdr,"resu_combp.csv",row.names=FALSE,sep=",")#
  }#
}#
#
```#
## Load DNAm and pheno data#
#
```{r data,warning=FALSE,message=FALSE,eval= FALSE}#
#
load("/Users/annebozack/Box/NIEHS-R01 ONES/Methylation Data/CordBlood_ComBat_Betas_Mvlas_filteredPorbes_metalAnalysis.RData")#
#
dim(pDatcordMetal)#
# 361 164#
#
dim(ComBat.Mvalues.Metals)#
# 394460    361#
#
rownames(pDatcordMetal) = pDatcordMetal$samplename
objects()
modAdj = model.matrix(~ Mn_log2 + female_d + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + pDatcordMetal$smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetal)#
#
dim(modAdj)#
# 361  21#
#
# M-values for comoplete cases#
ComBat.Betas.noMissAdj = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdj)]#
ComBat.Betas.noMissAdj <- ComBat.Betas.noMissAdj[,match(rownames(modAdj), colnames(ComBat.Mvalues.noMissAdj))]#
all(rownames(modAdj)==colnames(ComBat.Betas.noMissAdj))#
# TRUE #
identical(rownames(modAdj),colnames(ComBat.Betas.noMissAdj))#
# TRUE #
#
DMP_Mn_Adj_betas <- run_DMP(mvals = ComBat.Betas.noMissAdj, design = modAdj)
modAdj = model.matrix(~ Mn_log2 + female_d + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + pDatcordMetal$smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetal)
dim(modAdj)
ComBat.Betas.noMissAdj = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdj)]#
ComBat.Betas.noMissAdj <- ComBat.Betas.noMissAdj[,match(rownames(modAdj), colnames(ComBat.Mvalues.noMissAdj))]#
all(rownames(modAdj)==colnames(ComBat.Betas.noMissAdj))#
# TRUE #
identical(rownames(modAdj),colnames(ComBat.Betas.noMissAdj))
ComBat.Betas.noMissAdj <- ComBat.Betas.noMissAdj[,match(rownames(modAdj), colnames(ComBat.Betas.noMissAdj))]#
all(rownames(modAdj)==colnames(ComBat.Betas.noMissAdj))#
# TRUE #
identical(rownames(modAdj),colnames(ComBat.Betas.noMissAdj))
DMP_Mn_Adj_betas <- run_DMP(mvals = ComBat.Betas.noMissAdj, design = modAdj)
table(DMP_Mn_Adj_betas$P.Value < 0.05)
table(DMP_Mn_Adj_betas$adj.P.Val < 0.05)
sig = read.csv('/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/Mn_DMPs_sig.cs')
sig = read.csv('/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/Mn_DMPs_sig.csv')
sig
DMP_Mn_Adj_sig = sig[sig$group == 'all',]
head(DMP_Mn_Adj_betas)
DMP_Mn_Adj_sig = merge(DMP_Mn_Adj_sig, DMP_Mn_Adj_betas, by = 'cpg')
DMP_Mn_Adj_sig
modAdjF = model.matrix(~ Mn_log2 + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetalF)
pDatcordMetalF = pDatcordMetal[pDatcordMetal$female_d == 1,]
pDatcordMetalM = pDatcordMetal[pDatcordMetal$female_d == 0,]
modAdjF = model.matrix(~ Mn_log2 + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetalF)
dim(modAdjF)
ComBat.Betas.noMissAdjF = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdjF)]#
ComBat.Betas.noMissAdjF <- ComBat.Betas.noMissAdjF[,match(rownames(modAdjF), colnames(ComBat.Betas.noMissAdjF))]#
all(rownames(modAdjF)==colnames(ComBat.Betas.noMissAdjF))#
# TRUE #
identical(rownames(modAdjF),colnames(ComBat.Betas.noMissAdjF))
DMP_Mn_Adj_betasF <- run_DMP(mvals = ComBat.Betas.noMissAdjF, design = modAdjF)
table(DMP_Mn_Adj_betasF$P.Value < 0.05)
table(DMP_Mn_Adj_betasF$adj.P.Val < 0.05)
DMP_Mn_AdjF_sig = DMP_Mn_Adj_sig = sig[sig$group == 'female',]
DMP_Mn_AdjF_sig
DMP_Mn_AdjF_sig = merge(DMP_Mn_AdjF_sig, DMP_Mn_Adj_betasF, by = 'cpg')
modAdjM = model.matrix(~ Mn_log2 + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetalM)
dim(modAdjM)
ComBat.Betas.noMissAdjM = ComBat.Betas.noMissAdjM[,colnames(ComBat.Betas.noMissAdjM) %in% rownames(modAdjM)]
ComBat.Betas.noMissAdjM <- ComBat.Betas.noMissAdjM[,match(rownames(modAdjM), colnames(ComBat.Betas.noMissAdjM))]
ComBat.Betas.noMissAdjM = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdjM)]
all(rownames(modAdjM)==colnames(ComBat.Betas.noMissAdjM))
identical(rownames(modAdjM),colnames(ComBat.Betas.noMissAdjM))
DMP_Mn_Adj_betasM <- run_DMP(mvals = ComBat.Betas.noMissAdjM, design = modAdjM)
DMP_Mn_AdjM_sig = DMP_Mn_Adj_sig = sig[sig$group == 'male',]
DMP_Mn_AdjM_sig = merge(DMP_Mn_AdjM_sig, DMP_Mn_Adj_betasM, by = 'cpg')
DMP_Mn_AdjM_sig
write.csv(rbind(DMP_Mn_Adj_sig, DMP_Mn_AdjF_sig, DMP_Mn_AdjM_sig), '/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/Mn_DMPs_sig.csv')
DMP_Mn_Adj_sig
DMP_Mn_AdjF_sig
DMP_Mn_AdjM_sig
DMP_Mn_Adj_sig = DMP_Mn_Adj_sig[,-1]
DMP_Mn_AdjF_sig = DMP_Mn_AdjF_sig[,-1]
DMP_Mn_AdjM_sig = DMP_Mn_AdjM_sig[,-1]
colnames(DMP_Mn_AdjM_sig)[1] = 'cpg'
colnames(DMP_Mn_AdjF_sig)[1] = 'cpg'
colnames(DMP_Mn_Adj_sig)[1] = 'cpg'
write.csv(rbind(DMP_Mn_Adj_sig, DMP_Mn_AdjF_sig, DMP_Mn_AdjM_sig), '/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/Mn_DMPs_sig.csv')
dim(DMP_Mn_Adj_sig)
dim(DMP_Mn_AdjF_sig)
DMP_Mn_Adj_sig
DMP_Mn_AdjM_sig
dim(DMP_Mn_AdjF_sig)
dim(DMP_Mn_AdjM_sig)
DMP_Mn_Adj_sig
DMP_Mn_Adj_sig
DMP_Mn_Adj_sig = sig[sig$group == 'all']
DMP_Mn_Adj_sig = sig[sig$group == 'all',]
DMP_Mn_Adj_sig
DMP_Mn_Adj_sig = DMP_Mn_Adj_sig[,-1]
DMP_Mn_Adj_sig
DMP_Mn_Adj_sig = merge(DMP_Mn_Adj_sig, DMP_Mn_Adj_betas, by = 'cpg')
DMP_Mn_Adj_sig
DMP_Mn_AdjF_sig = sig[sig$group == 'female',]
DMP_Mn_AdjF_sig
DMP_Mn_AdjF_sig = DMP_Mn_AdjF_sig[,-1]
DMP_Mn_AdjF_sig = merge(DMP_Mn_AdjF_sig, DMP_Mn_Adj_betasF, by = 'cpg')
DMP_Mn_AdjF_sig
DMP_Mn_AdjM_sig = sig[sig$group == 'male',]
DMP_Mn_AdjM_sig = DMP_Mn_AdjM_sig[,1]
DMP_Mn_AdjM_sig = sig[sig$group == 'male',]
DMP_Mn_AdjM_sig = DMP_Mn_AdjM_sig[,-1]
DMP_Mn_AdjM_sig = merge(DMP_Mn_AdjM_sig, DMP_Mn_Adj_betasM, by = 'cpg')
DMP_Mn_AdjM_sig
write.csv(rbind(DMP_Mn_Adj_sig, DMP_Mn_AdjF_sig, DMP_Mn_AdjM_sig), '/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/Mn_DMPs_sig.csv')
rm(DMP_Mn_Adj_betasM, ComBat.Betas.noMissAdjM)
rm(DMP_Mn_Adj_betasF, ComBat.Betas.noMissAdjF)
rm(DMP_Mn_Adj_betas, ComBat.Betas.noMissAdj)
gc()
render('/Users/annebozack/Documents/Cardenas/viva_DNAm_metals/viva_DNAm_metals_DMP_DMR_020121.rmd')
library(rmarkdown)
library(gridExtra)
library(knitr)
library(ggplot2)
library(dplyr)
library(kableExtra)
render('/Users/annebozack/Documents/Cardenas/viva_DNAm_metals/viva_DNAm_metals_DMP_DMR_020121.rmd')
dim(ComBat.Mvalues.noMissAdj)
modAdj = model.matrix(~ Mn_log2 + female_d + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + pDatcordMetal$smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetal)#
#
dim(modAdj)#
# 361  21#
#
# M-values for comoplete cases#
ComBat.Mvalues.noMissAdj = ComBat.Mvalues.Metals[,colnames(ComBat.Mvalues.Metals) %in% rownames(modAdj)]#
ComBat.Mvalues.noMissAdj <- ComBat.Mvalues.noMissAdj[,match(rownames(modAdj), colnames(ComBat.Mvalues.noMissAdj))]#
all(rownames(modAdj)==colnames(ComBat.Mvalues.noMissAdj))#
# TRUE #
identical(rownames(modAdj),colnames(ComBat.Mvalues.noMissAdj))
cpg = lm(ComBat.Mvalues.noMissAdj[rownames(ComBat.Mvalues.noMissAdj) == 'cg02042823',] ~ pDatcordMetal$Mn_log2 + pDatcordMetal$female_d + pDatcordMetal$race_child2 + pDatcordMetal$gestage_wks_deliv_d + pDatcordMetal$age_mom_enroll_d + pDatcordMetal$bmi_mom_prepreg_d + pDatcordMetal$coll_grad + pDatcordMetal$nullip + pDatcordMetal$gt70k + pDatcordMetal$smk_preg + pDatcordMetal$Bcell_GS_cb + pDatcordMetal$CD4T_GS_cb + pDatcordMetal$CD8T_GS_cb + pDatcordMetal$Gran_GS_cb + pDatcordMetal$Mono_GS_cb + pDatcordMetal$NK_GS_cb + pDatcordMetal$nRBC_GS_cb)
summary(cpg)
ComBat.Betas.noMissAdj = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdj)]#
ComBat.Betas.noMissAdj <- ComBat.Betas.noMissAdj[,match(rownames(modAdj), colnames(ComBat.Betas.noMissAdj))]#
all(rownames(modAdj)==colnames(ComBat.Betas.noMissAdj))#
# TRUE #
identical(rownames(modAdj),colnames(ComBat.Betas.noMissAdj))
cpg = lm(ComBat.Betas.noMissAdj[rownames(ComBat.Betas.noMissAdj) == 'cg02042823',] ~ pDatcordMetal$Mn_log2 + pDatcordMetal$female_d + pDatcordMetal$race_child2 + pDatcordMetal$gestage_wks_deliv_d + pDatcordMetal$age_mom_enroll_d + pDatcordMetal$bmi_mom_prepreg_d + pDatcordMetal$coll_grad + pDatcordMetal$nullip + pDatcordMetal$gt70k + pDatcordMetal$smk_preg + pDatcordMetal$Bcell_GS_cb + pDatcordMetal$CD4T_GS_cb + pDatcordMetal$CD8T_GS_cb + pDatcordMetal$Gran_GS_cb + pDatcordMetal$Mono_GS_cb + pDatcordMetal$NK_GS_cb + pDatcordMetal$nRBC_GS_cb)
summary(cpg)
range(ComBat.Betas.noMissAdj[rownames(ComBat.Betas.noMissAdj) == #
    "cg02042823", ])
mean(ComBat.Betas.noMissAdj[rownames(ComBat.Betas.noMissAdj) == #
    "cg02042823", ])
median(ComBat.Betas.noMissAdj[rownames(ComBat.Betas.noMissAdj) == #
    "cg02042823", ])
modAdjF = model.matrix(~ Mn_log2 + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetalF)
ComBat.Betas.noMissAdjF = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdjF)]#
ComBat.Betas.noMissAdjF <- ComBat.Betas.noMissAdjF[,match(rownames(modAdjF), colnames(ComBat.Betas.noMissAdjF))]#
all(rownames(modAdjF)==colnames(ComBat.Betas.noMissAdjF))#
# TRUE #
identical(rownames(modAdjF),colnames(ComBat.Betas.noMissAdjF))
dim(ComBat.Betas.noMissAdjF)
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg00954161',])
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg00954161',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg01744822',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg08904630',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg11161853',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg15712310',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg19908812',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg22799518',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg23903787',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg26462130',])*100
median(ComBat.Betas.noMissAdjF[rownames(ComBat.Betas.noMissAdjF) == 'cg02042823',])*100
modAdjM = model.matrix(~ Mn_log2 + race_child2 + gestage_wks_deliv_d + age_mom_enroll_d + bmi_mom_prepreg_d + coll_grad + nullip + gt70k + smk_preg + Bcell_GS_cb + CD4T_GS_cb + CD8T_GS_cb + Gran_GS_cb + Mono_GS_cb + NK_GS_cb + nRBC_GS_cb, data = pDatcordMetalM)
ComBat.Betas.noMissAdjM = ComBat.Betas.Metals[,colnames(ComBat.Betas.Metals) %in% rownames(modAdjM)]#
ComBat.Betas.noMissAdjM <- ComBat.Betas.noMissAdjM[,match(rownames(modAdjM), colnames(ComBat.Betas.noMissAdjM))]#
all(rownames(modAdjM)==colnames(ComBat.Betas.noMissAdjM))#
# TRUE #
identical(rownames(modAdjM),colnames(ComBat.Betas.noMissAdjM))
median(ComBat.Betas.noMissAdjM[rownames(ComBat.Betas.noMissAdjM) == 'cg02042823',])*100
median(ComBat.Betas.noMissAdjM[rownames(ComBat.Betas.noMissAdjM) == 'cg03763518',])*100
median(ComBat.Betas.noMissAdjM[rownames(ComBat.Betas.noMissAdjM) == 'cg03763518',])*100
head(anno)
anno$UCSC_RefGene_Group[rownames(anno) == 'cg02042823']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg00954161']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg11161853']
anno$UCSC_RefGene_Group[rownames(anno) == '3527371']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg23903787']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg19908812']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg26462130']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg08904630']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg22799518']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg03763518']
anno$UCSC_RefGene_Group[rownames(anno) == 'cg02042823']
if (!requireNamespace("BiocManager", quietly=TRUE))#
    install.packages("BiocManager")#
BiocManager::install("annotatr")
BiocManager::install("annotatr")
library(annotatr)
dmr = read.csv('/Users/annebozack/Documents/Cardenas/viva_DNAm_metals_local/combp_results_all.csv')
library('bumphunter')
islands=makeGRangesFromDataFrame(read.delim("http://rafalab.jhsph.edu/CGI/model-based-cpg-islands-hg19.txt")[1:100,])#
    library("TxDb.Hsapiens.UCSC.hg19.knownGene")#
    genes <- annotateTranscripts(TxDb.Hsapiens.UCSC.hg19.knownGene)#
    tab<- matchGenes(islands,genes)
islands=makeGRangesFromDataFrame(read.delim("http://rafalab.jhsph.edu/CGI/model-based-cpg-islands-hg19.txt")[1:100,])
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
genes <- annotateTranscripts(TxDb.Hsapiens.UCSC.hg19.knownGene)
class(genes)
head(genes)
di(genes)
dim(genes)
genes
head(dmr)
tab<- matchGenes(dmr,genes)
tab
dmr
head(tab)
dim(tab)
dim(dmr)
islands=makeGRangesFromDataFrame(read.delim("http://rafalab.jhsph.edu/CGI/model-based-cpg-islands-hg19.txt")[1:100,])
head(anno)
clas(genes)
class(genes)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
genes
dmr = makeGRangesFromDataFrame(dmr, keep.extra.columns=T)
dmr
annotateGRfromGR(dmr, genes)
devtools::install_github("jmw86069/splicejam")
install.packages("rlang")
devtools::install_github("jmw86069/splicejam")
library(rlang)
